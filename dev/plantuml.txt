@startuml

package analyze {
  abstract class Analyzer {
    metadata: Document_Metadata
    {abstract} analyze()
  }

  class Docx_Analyzer {
    metadata: Document_Metadata
    analyze()
  }
  Docx_Analyzer <|-- Analyzer
}

package args {
  class Argv_Parser {
    parser: argparse.ArgumentParser
  } 
}

package data {
  package prog {
    package build {
      class Text_Chunk {
        set_text()
        get_text()
        test_bool()
        set_style()
        set_bold()
        is_bold()
        set_italic()
        is_italic()
        set_underline()
        is_underline()
        set_strike()
        is_strike()
        set_color()
        get_color()
        set_size()
        get_size()
      }

      class Paragraph_Attributes {
        set_alignment()
        get_alignment()
        set_type()
        get_type()
        set_left_indent()
        get_left_indent()
        set_right_indent()
        get_right_indent()
      }

      class Document_Metadata {
        set_font_size()
        get_font_size()
        set_left_indent()
        get_left_indent()
        set_alignment()
        get_alignment()
      }
    }

    package enum {
      enum DOCUMENT_FORMAT {
        NONE = 0
        SCRNPL = 1
        RENPY = 2
      }

      enum DOCUMENT_TYPE {
        RAW = 0
        MRKDWN = 1
        FDX = 2
        DOCX = 3
      }

      enum PARAGRAPH_ALIGNMENT {
        NONE = 0
        LEFT = 1
        CENTER = 2
        RIGHT = 3
        JUSTIFY = 4
        OTHER = 5
      }

      enum RENPY_STATEMENT {
        EMPTY = -1
        NONE = 0
        SAY = 1
        SHOW = 2
        SCENE = 3
        AUDIO = 4
        VOICE = 5
        SOUND = 6
        MUSIC = 7
        IMAGE = 8
        DEFINE = 9
      }

      enum SCREENPLAY_TEXT {
        EMPTY = -1
        NONE = 0
        TRNSTN = 1
        HEADER = 2
        ACTION = 3
        SLUGLN = 4
        CHRCTR = 5
        PRNTHT = 6
        DIALOG = 7
        NORMAL = 8
        UPPER = 9
      }
    }
  }

  package user {
    database projects.json {}
  }
}

package format {
  package default {
    class Default_Document {
      alignment = PARAGRAPH_ALIGNMENT.LEFT
      font_size = 11.0
      left_indent = 1.0
      right_indent = 1.0
    }

    class Default_Screenplay {
      alignment = PARAGRAPH_ALIGNMENT.LEFT
      font_size = 12.0
      left_indent = 1.5
      right_indent = 1.0
      chrctr_indent = 3.5
      prnth_indent = 3.0
      dialog_indent = 2.5
      trnstn_indent = 6.0
    }
  }

  package input {
    class Screenplay_Input {
      regex: Screenplay_Regex
      match()
    }
  }

  package output {
    class RenPy_Output {
      None
    }
  }

  package regex {
    class Screenplay_Regex {
      empty: re.Pattern
      normal: re.Pattern
      upper: re.Pattern
      char_set: re.Pattern
      transition: re.Pattern
      header: re.Pattern
      character: re.Pattern
      parenthetical: re.Pattern
    }
  }
}

package proxy {
  abstract class Proxy {
    {abstract} get_instance()
  }

  class Reader_Proxy {
    get_instance()
  }
  Reader_Proxy <|-- Proxy
}

package read {
  abstract class Reader {
    file_name: str
    open_file: any
    is_eof: bool
    {abstract} open()
    {abstract} read()
  }

  class Docx_Reader {
    file_name: str
    open_file: any
    is_eof: bool
    open()
    read()
  }
  Docx_Reader <|-- Reader

  class Fdx_Reader {
    file_name: str
    open_file: any
    is_eof: bool
    open()
    read()
  }
  Fdx_Reader <|-- Reader

  class Raw_Reader{
    file_name: str
    open_file: any
    is_eof: bool
    open()
    read()
  }
  Raw_Reader <|-- Reader
}

package translate {
  abstract class Translator {
    {abstract} translate()
  }

  class Screenplay_to_Renpy {
    input_format: Screenplay_Input
    translate()
  }
  Screenplay_to_Renpy  <|-- Translator
}

package write {
  abstract class Writer {
    file_name: str
    open_file: any
    {abstract} open()
    {abstract} writepart()
  }
}
@enduml